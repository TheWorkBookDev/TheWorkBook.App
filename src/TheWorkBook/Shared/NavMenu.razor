@inject IdentityModel.OidcClient.OidcClient client;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TheWorkBook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @*<div class="nav-item px-3">
            <NavLink class="nav-link" href="joblisting/1">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Job Listing
            </NavLink>
        </div>*@
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="postjob">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Post Job
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="userprofile">
                <span class="oi oi-list-rich" aria-hidden="true"></span> My Profile
            </NavLink>
        </div>

        @if (isLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" @onclick="Logout">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Logout
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool isLoggedIn;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private async Task ToggleNavMenu()
    {
        await CheckLoggedIn();
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        //await client.LogoutAsync();
        IdentityModel.OidcClient.LogoutRequest request = new IdentityModel.OidcClient.LogoutRequest();
        request.BrowserDisplayMode = IdentityModel.OidcClient.Browser.DisplayMode.Hidden;
        request.IdTokenHint = await SecureStorage.GetAsync(OidcConsts.IdentityTokenKeyName);
        await client.LogoutAsync(request);
        
        await SecureStorage.SetAsync(OidcConsts.AccessTokenKeyName, string.Empty);
        await SecureStorage.SetAsync(OidcConsts.RefreshTokenKeyName, string.Empty);
        await CheckLoggedIn();
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckLoggedIn();
    }

    private async Task CheckLoggedIn()
    {
        string token = await SecureStorage.GetAsync(OidcConsts.AccessTokenKeyName);
        isLoggedIn = !string.IsNullOrEmpty(token);
    }
}
